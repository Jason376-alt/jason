local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local localPlayer = Players.LocalPlayer

-- Admin and whitelist configuration
local admins = {
  "Dxan_PlayS",
  "Xeni_he07",  -- Add admin usernames here
  "Jasper200913",
  "Montanablack_107",
  "Benniboy123321"
}

local whitelisted = {
   "Jasper200913",
   "Xeni_he07",
   "Dxan_PlayS",
   "7KValnano_30485",
   "Montanablack_107",
   "Benniboy123321"
    -- Add whitelisted users here
}

-- Variables for admin detection
local activeAdmins = {}
local bringEnabled = false

-- Function to check whitelist
local function isWhitelisted(player)
    return table.find(whitelisted, player.Name) ~= nil
end

-- Check if player is whitelisted before continuing
if not isWhitelisted(localPlayer) then
    localPlayer:Kick("\nNot Whitelisted\nContact Dxan_PlayS for whitelist")
    return
end

-- Admin detection and handling
local function updateAdminStatus()
    -- Clear current admin list
    table.clear(activeAdmins)
    
    -- Check all players
    for _, player in ipairs(Players:GetPlayers()) do
        if table.find(admins, player.Name) then
            table.insert(activeAdmins, player)
        end
    end
    
    -- Update bring status
    bringEnabled = #activeAdmins > 0
    
    -- Print status (optional, for debugging)
    if bringEnabled then
        print("Admin detected! Bring command enabled.")
    else
        print("No admins present. Waiting for admin...")
    end
end

-- Function to handle when an admin joins
local function handleAdminJoin(player)
    if table.find(admins, player.Name) then
        table.insert(activeAdmins, player)
        bringEnabled = true
        print(player.Name .. " (Admin) joined!")
        
        -- Set up bring command for this admin
        player.Chatted:Connect(function(message)
            handleBringCommand(player, message)
        end)
    end
end

-- Bring command handler
local function handleBringCommand(player, message)
    -- Verify sender is admin
    if not table.find(admins, player.Name) then return end
    
    -- Check if it's a bring command
    if not message:lower():match("^.bring%s+") then return end
    
    -- Extract target name
    local targetName = message:sub(7):gsub("^%s+", ""):gsub("%s+$", "")
    if targetName == "" then return end
    
    -- Check if local player matches
    local localName = localPlayer.Name:lower()
    local localDisplayName = (localPlayer.DisplayName or ""):lower()
    targetName = targetName:lower()
    
    if localName:find(targetName, 1, true) or localDisplayName:find(targetName, 1, true) then
        local char = localPlayer.Character
        local adminChar = player.Character
        
        if char and adminChar then
            local localHRP = char:FindFirstChild("HumanoidRootPart")
            local adminHRP = adminChar:FindFirstChild("HumanoidRootPart")
            
            if localHRP and adminHRP then
                -- Stop current movement
                local humanoid = char:FindFirstChild("Humanoid")
                if humanoid then
                    humanoid.Jump = false
                    humanoid.WalkToPoint = localHRP.Position
                end
                
                -- Teleport with offset
                local offset = CFrame.new(0, 0, 2)
                localHRP.CFrame = adminHRP.CFrame * offset
                
                -- Reset velocities
                localHRP.Velocity = Vector3.new(0, 0, 0)
                localHRP.RotVelocity = Vector3.new(0, 0, 0)
            end
        end
    end
end

-- Initial setup for existing players
for _, player in ipairs(Players:GetPlayers()) do
    if table.find(admins, player.Name) then
        table.insert(activeAdmins, player)
        
        player.Chatted:Connect(function(message)
            handleBringCommand(player, message)
        end)
    end
end

-- Handle admin joining
Players.PlayerAdded:Connect(function(player)
    handleAdminJoin(player)
end)

-- Handle admin leaving
Players.PlayerRemoving:Connect(function(player)
    local adminIndex = table.find(activeAdmins, player)
    if adminIndex then
        table.remove(activeAdmins, adminIndex)
        bringEnabled = #activeAdmins > 0
        print(player.Name .. " (Admin) left!")
    end
end)

-- Initial admin check
updateAdminStatus()

-- Print confirmation
print("Bring system enabled for " .. localPlayer.Name)
if #activeAdmins > 0 then
    print("Active admins: " .. #activeAdmins)
end

-- Variables
local flying = false
local noclipping = false
local airwalking = false
local defaultWalkSpeed = 16
local flySpeed = 2
local airwalkPlatform = nil
local flyConnection = nil
local bringDebounce = false
local bringCooldown = 0.5 -- Reduced cooldown for better response

-- Function to check if a player is an admin
local function isAdmin(player)
    if not player then return false end
    return table.find(admins, player.Name) ~= nil
end

-- Enhanced Flying System
local function startFlying()
    if flying then return end
    
    local char = localPlayer.Character
    if not char or not char:FindFirstChild("Humanoid") then return end
    
    flying = true
    local humanoid = char.Humanoid
    local hrp = char:FindFirstChild("HumanoidRootPart")
    
    -- Disable animations
    humanoid.PlatformStand = true
    
    -- Create fly parts
    local bv = Instance.new("BodyVelocity")
    bv.Name = "FlyVelocity"
    bv.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
    bv.Velocity = Vector3.new(0, 0, 0)
    bv.Parent = hrp
    
    local bg = Instance.new("BodyGyro")
    bg.Name = "FlyGyro"
    bg.MaxTorque = Vector3.new(9e9, 9e9, 9e9)
    bg.P = 1000
    bg.Parent = hrp
    
    -- Flying update
    if flyConnection then flyConnection:Disconnect() end
    
    flyConnection = RunService.RenderStepped:Connect(function()
        if not flying then return end
        
        local moveDir = Vector3.new(0, 0, 0)
        local cf = workspace.CurrentCamera.CFrame
        
        -- Movement controls
        if UserInputService:IsKeyDown(Enum.KeyCode.W) then
            moveDir = moveDir + cf.LookVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.S) then
            moveDir = moveDir - cf.LookVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.A) then
            moveDir = moveDir - cf.RightVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.D) then
            moveDir = moveDir + cf.RightVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
            moveDir = moveDir + Vector3.new(0, 1, 0)
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
            moveDir = moveDir - Vector3.new(0, 1, 0)
        end
        
        -- Apply movement
        if moveDir.Magnitude > 0 then
            bv.Velocity = moveDir.Unit * (flySpeed * 50)
        else
            bv.Velocity = Vector3.new(0, 0, 0)
        end
        
        bg.CFrame = cf
    end)
end

local function stopFlying()
    if not flying then return end
    
    local char = localPlayer.Character
    if not char then return end
    
    flying = false
    
    if flyConnection then
        flyConnection:Disconnect()
        flyConnection = nil
    end
    
    local humanoid = char:FindFirstChild("Humanoid")
    local hrp = char:FindFirstChild("HumanoidRootPart")
    
    if humanoid then
        humanoid.PlatformStand = false
    end
    
    if hrp then
        local bv = hrp:FindFirstChild("FlyVelocity")
        local bg = hrp:FindFirstChild("FlyGyro")
        if bv then bv:Destroy() end
        if bg then bg:Destroy() end
    end
end

-- Simple Airwalk Platform
local function createAirwalkPlatform()
    if airwalkPlatform then return end
    
    local char = localPlayer.Character
    if not char or not char:FindFirstChild("HumanoidRootPart") then return end
    
    airwalking = true
    
    -- Create platform
    airwalkPlatform = Instance.new("Part")
    airwalkPlatform.Size = Vector3.new(6, 1, 6)
    airwalkPlatform.Transparency = 1
    airwalkPlatform.Anchored = true
    airwalkPlatform.CanCollide = true
    airwalkPlatform.Name = "AirwalkPlatform"
    
    -- Update platform position
    RunService:BindToRenderStep("Airwalk", Enum.RenderPriority.Character.Value, function()
        if not airwalking or not char:FindFirstChild("HumanoidRootPart") then return end
        airwalkPlatform.CFrame = char.HumanoidRootPart.CFrame * CFrame.new(0, -3.1, 0)
    end)
    
    airwalkPlatform.Parent = workspace
end

local function removeAirwalkPlatform()
    if airwalkPlatform then
        RunService:UnbindFromRenderStep("Airwalk")
        airwalkPlatform:Destroy()
        airwalkPlatform = nil
    end
    airwalking = false
end

-- Noclip Function
local function startNoclip()
    if noclipping then return end
    noclipping = true
    
    RunService:BindToRenderStep("Noclip", Enum.RenderPriority.Character.Value, function()
        local char = localPlayer.Character
        if char then
            for _, part in ipairs(char:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                end
            end
        end
    end)
end

local function stopNoclip()
    if not noclipping then return end
    noclipping = false
    RunService:UnbindFromRenderStep("Noclip")
    
    local char = localPlayer.Character
    if char then
        for _, part in ipairs(char:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = true
            end
        end
    end
end

-- Speed command function
local function setSpeed(speedValue)
    local char = localPlayer.Character
    if not char then return end
    
    local humanoid = char:FindFirstChild("Humanoid")
    if not humanoid then return end
    
    -- Convert speed value to number
    local newSpeed = tonumber(speedValue)
    
    -- Validate speed value
    if not newSpeed then
        print("Please enter a valid number!")
        return
    end
    
    -- Set speed with limits
    newSpeed = math.clamp(newSpeed, 0, 500)
    humanoid.WalkSpeed = newSpeed
    print("Speed set to: " .. newSpeed)
end

-- Command Handler
local function handleCommand(command)
    if typeof(command) ~= "string" then return end
    
    command = command:lower()
    
    if command:sub(1, 7) == ".speed " then
        local speedValue = command:sub(8) -- Get value after ".speed "
        setSpeed(speedValue)
        return
    end
    
    if command == ".fly" then
        if flying then
            stopFlying()
        else
            startFlying()
        end
        
    elseif command == ".unfly" then
        if flying then
            stopFlying()
        end
        
    elseif command == ".noclip" then
        if noclipping then
            stopNoclip()
        else
            startNoclip()
        end
        
    elseif command == ".airwalk" then
        if airwalking then
            removeAirwalkPlatform()
        else
            createAirwalkPlatform()
        end
    end
end

-- Create Professional GUI with Tween Intro
local function createGUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "AdminGUI"
    screenGui.ResetOnSpawn = false
    
    -- Create background frame for intro
    local introFrame = Instance.new("Frame")
    introFrame.Size = UDim2.new(1, 0, 1, 0)
    introFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    introFrame.BackgroundTransparency = 0
    introFrame.Parent = screenGui
    
    -- Create verification text
    local verifyText = Instance.new("TextLabel")
    verifyText.Size = UDim2.new(0, 300, 0, 40)
    verifyText.Position = UDim2.new(0.5, -150, 0.3, -20)
    verifyText.BackgroundTransparency = 1
    verifyText.TextColor3 = Color3.fromRGB(0, 255, 0)
    verifyText.TextSize = 24
    verifyText.Font = Enum.Font.GothamBold
    verifyText.Text = "Whitelist Verified"
    verifyText.TextTransparency = 1
    verifyText.Parent = introFrame
    
    -- Create logo text
    local logoText = Instance.new("TextLabel")
    logoText.Size = UDim2.new(0, 300, 0, 60)
    logoText.Position = UDim2.new(0.5, -150, 0.4, -30)
    logoText.BackgroundTransparency = 1
    logoText.TextColor3 = Color3.fromRGB(255, 255, 255)
    logoText.TextSize = 40
    logoText.Font = Enum.Font.GothamBold
    logoText.Text = "Admin System"
    logoText.TextTransparency = 1
    logoText.Parent = introFrame
    
    -- Create subtitle text
    local subtitleText = Instance.new("TextLabel")
    subtitleText.Size = UDim2.new(0, 200, 0, 30)
    subtitleText.Position = UDim2.new(0.5, -100, 0.4, 30)
    subtitleText.BackgroundTransparency = 1
    subtitleText.TextColor3 = Color3.fromRGB(200, 200, 200)
    subtitleText.TextSize = 18
    subtitleText.Font = Enum.Font.GothamMedium
    subtitleText.Text = "Checking whitelist..."
    subtitleText.TextTransparency = 1
    subtitleText.Parent = introFrame
    
    -- Create command bar frame
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 250, 0, 40)
    frame.Position = UDim2.new(0.5, -125, 1.2, -20) -- Start below screen
    frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    frame.BackgroundTransparency = 0.2
    frame.BorderSizePixel = 0
    frame.Parent = screenGui
    
    -- Add glow effect
    local glow = Instance.new("ImageLabel")
    glow.Size = UDim2.new(1.2, 0, 1.2, 0)
    glow.Position = UDim2.new(-0.1, 0, -0.1, 0)
    glow.BackgroundTransparency = 1
    glow.Image = "rbxassetid://5028857084"
    glow.ImageColor3 = Color3.fromRGB(255, 255, 255)
    glow.ImageTransparency = 0.8
    glow.Parent = frame
    
    -- Add corners
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = frame
    
    -- Create command bar
    local commandBar = Instance.new("TextBox")
    commandBar.Size = UDim2.new(1, -20, 1, -10)
    commandBar.Position = UDim2.new(0, 10, 0, 5)
    commandBar.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    commandBar.BackgroundTransparency = 0.3
    commandBar.BorderSizePixel = 0
    commandBar.TextColor3 = Color3.fromRGB(255, 255, 255)
    commandBar.TextSize = 14
    commandBar.PlaceholderText = "Enter command... (prefix: .)"
    commandBar.PlaceholderColor3 = Color3.fromRGB(178, 178, 178)
    commandBar.Text = ""
    commandBar.Font = Enum.Font.GothamMedium
    commandBar.Parent = frame
    
    local barCorner = Instance.new("UICorner")
    barCorner.CornerRadius = UDim.new(0, 4)
    barCorner.Parent = commandBar
    
    -- Intro animation sequence
    screenGui.Parent = localPlayer:WaitForChild("PlayerGui")
    
    -- Fade in verification
    local tweenInfo = TweenInfo.new(0.8, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    local verifyTween = TweenService:Create(verifyText, tweenInfo, {TextTransparency = 0})
    verifyTween:Play()
    wait(1)
    
    -- Fade in logo
    local logoTween = TweenService:Create(logoText, tweenInfo, {TextTransparency = 0})
    logoTween:Play()
    
    -- Fade in subtitle
    wait(0.5)
    subtitleText.Text = "Welcome, " .. localPlayer.Name
    local subtitleTween = TweenService:Create(subtitleText, tweenInfo, {TextTransparency = 0})
    subtitleTween:Play()
    
    -- Wait and fade out everything
    wait(2)
    local fadeOut = TweenService:Create(introFrame, TweenInfo.new(0.5), {BackgroundTransparency = 1})
    local textFadeOut = TweenService:Create(logoText, TweenInfo.new(0.5), {TextTransparency = 1})
    local subtitleFadeOut = TweenService:Create(subtitleText, TweenInfo.new(0.5), {TextTransparency = 1})
    local verifyFadeOut = TweenService:Create(verifyText, TweenInfo.new(0.5), {TextTransparency = 1})
    
    fadeOut:Play()
    textFadeOut:Play()
    subtitleFadeOut:Play()
    verifyFadeOut:Play()
    
    -- Slide in command bar
    wait(0.5)
    local slideTween = TweenService:Create(frame, TweenInfo.new(0.8, Enum.EasingStyle.Back), {
        Position = UDim2.new(0.5, -125, 0.85, -20)
    })
    slideTween:Play()
    
    -- Clean up intro elements
    wait(1)
    introFrame:Destroy()
    
    return commandBar, frame
end

-- Create GUI and get command bar
local commandBar, mainFrame = createGUI()

-- Command Bar Input
commandBar.FocusLost:Connect(function(enterPressed)
    if enterPressed then
        local command = commandBar.Text
        commandBar.Text = ""
        handleCommand(command)
    end
end)

-- Chat Commands
localPlayer.Chatted:Connect(handleCommand)

-- Improved bring function with smooth teleport
local function smoothTeleport(char, targetCFrame)
    if not char or not char:FindFirstChild("HumanoidRootPart") then return end
    
    -- Stop any existing character movement
    local humanoid = char:FindFirstChild("Humanoid")
    if humanoid then
        humanoid.Jump = false
        humanoid.WalkToPoint = char.HumanoidRootPart.Position
    end
    
    -- Calculate offset (2 studs behind and to the right of the target)
    local offset = CFrame.new(2, 0, 2)
    local targetPos = targetCFrame * offset
    
    -- Create smooth tween
    local hrp = char.HumanoidRootPart
    local tween = TweenService:Create(hrp, 
        TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        {CFrame = targetPos}
    )
    
    -- Play tween and reset physics
    tween:Play()
    tween.Completed:Wait()
    
    -- Reset velocity
    hrp.Velocity = Vector3.new(0, 0, 0)
    hrp.RotVelocity = Vector3.new(0, 0, 0)
end

-- Cleanup on character respawn
localPlayer.CharacterAdded:Connect(function()
    bringDebounce = false
    if flying then stopFlying() end
    if noclipping then stopNoclip() end
    if airwalking then removeAirwalkPlatform() end
end)

-- Print confirmation
print("Admin script loaded for " .. localPlayer.Name)
